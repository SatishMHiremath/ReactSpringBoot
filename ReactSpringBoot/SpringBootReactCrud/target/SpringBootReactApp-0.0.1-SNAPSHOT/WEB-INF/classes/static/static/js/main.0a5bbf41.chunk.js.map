{"version":3,"sources":["service/ApiService.js","component/user/ListUserComponent.jsx","component/user/AddUserComponent.jsx","component/user/EditUserComponent.jsx","component/RouterComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["USER_API_BASE_URL","axios","get","userId","delete","user","post","put","id","ListUserComponent","props","state","users","message","deleteUser","bind","editUser","addUser","reloadUserList","this","ApiService","fetchUsers","then","res","setState","data","result","filter","window","localStorage","setItem","history","push","removeItem","className","onClick","map","key","firstName","lastName","username","age","salary","Component","AddUserComponent","saveUser","e","preventDefault","password","onChange","target","name","value","type","placeholder","EditUserComponent","loadUser","fetchUserById","getItem","readonly","defaultValue","style","color","margin","AppRouter","path","exact","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0a5bbf41.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst USER_API_BASE_URL = 'http://localhost:8080/users';\r\n\r\nclass ApiService {\r\n\r\n    fetchUsers() {\r\n        return axios.get(USER_API_BASE_URL);\r\n    }\r\n\r\n    fetchUserById(userId) {\r\n        return axios.get(USER_API_BASE_URL + '/' + userId);\r\n    }\r\n\r\n    deleteUser(userId) {\r\n        return axios.delete(USER_API_BASE_URL + '/' + userId);\r\n    }\r\n\r\n    addUser(user) {\r\n        return axios.post(\"\"+USER_API_BASE_URL, user);\r\n    }\r\n\r\n    editUser(user) {\r\n        return axios.put(USER_API_BASE_URL + '/' + user.id, user);\r\n    }\r\n\r\n}\r\n\r\nexport default new ApiService();","import React, { Component } from 'react'\r\nimport ApiService from \"../../service/ApiService\";\r\n\r\nclass ListUserComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: [],\r\n            message: null\r\n        }\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n        this.editUser = this.editUser.bind(this);\r\n        this.addUser = this.addUser.bind(this);\r\n        this.reloadUserList = this.reloadUserList.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reloadUserList();\r\n    }\r\n\r\n    reloadUserList() {\r\n        ApiService.fetchUsers()\r\n            .then((res) => {\r\n                this.setState({users: res.data.result})\r\n            });\r\n    }\r\n\r\n    deleteUser(userId) {\r\n        ApiService.deleteUser(userId)\r\n           .then(res => {\r\n               this.setState({message : 'User deleted successfully.'});\r\n               this.setState({users: this.state.users.filter(user => user.id !== userId)});\r\n           })\r\n\r\n    }\r\n\r\n    editUser(id) {\r\n        window.localStorage.setItem(\"userId\", id);\r\n        this.props.history.push('/edit-user');\r\n    }\r\n\r\n    addUser() {\r\n        window.localStorage.removeItem(\"userId\");\r\n        this.props.history.push('/add-user');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\">User Details</h2>\r\n                <button className=\"btn btn-danger\" onClick={() => this.addUser()}> Add User</button>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"hidden\">Id</th>\r\n                            <th>FirstName</th>\r\n                            <th>LastName</th>\r\n                            <th>UserName</th>\r\n                            <th>Age</th>\r\n                            <th>Salary</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.users.map(\r\n                        user =>\r\n                                    <tr key={user.id}>\r\n                                        <td>{user.firstName}</td>\r\n                                        <td>{user.lastName}</td>\r\n                                        <td>{user.username}</td>\r\n                                        <td>{user.age}</td>\r\n                                        <td>{user.salary}</td>\r\n                                        <td>\r\n                                            <button className=\"btn btn-success\" onClick={() => this.deleteUser(user.id)}> Delete</button>\r\n                                            <button className=\"btn btn-success\" onClick={() => this.editUser(user.id)}> Edit</button>\r\n                                        </td>\r\n                                    </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ListUserComponent;\r\n","import React, { Component } from 'react'\r\nimport ApiService from \"../../service/ApiService\";\r\n\r\nclass AddUserComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            age: '',\r\n            salary: '',\r\n            message: null\r\n        }\r\n        this.saveUser = this.saveUser.bind(this);\r\n    }\r\n\r\n    saveUser = (e) => {\r\n        e.preventDefault();\r\n        let user = {username: this.state.username, password: this.state.password, firstName: this.state.firstName, lastName: this.state.lastName, age: this.state.age, salary: this.state.salary};\r\n        ApiService.addUser(user)\r\n            .then(res => {\r\n                this.setState({message : 'User added successfully.'});\r\n                this.props.history.push('/users');\r\n            });\r\n    }\r\n\r\n    onChange = (e) =>\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2 className=\"text-center\">Add User</h2>\r\n                <form>\r\n                <div className=\"form-group\">\r\n                    <label>User Name:</label>\r\n                    <input type=\"text\" placeholder=\"username\" name=\"username\" className=\"form-control\" value={this.state.username} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password:</label>\r\n                    <input type=\"password\" placeholder=\"password\" name=\"password\" className=\"form-control\" value={this.state.password} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>First Name:</label>\r\n                    <input placeholder=\"First Name\" name=\"firstName\" className=\"form-control\" value={this.state.firstName} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Last Name:</label>\r\n                    <input placeholder=\"Last name\" name=\"lastName\" className=\"form-control\" value={this.state.lastName} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Age:</label>\r\n                    <input type=\"number\" placeholder=\"age\" name=\"age\" className=\"form-control\" value={this.state.age} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Salary:</label>\r\n                    <input type=\"number\" placeholder=\"salary\" name=\"salary\" className=\"form-control\" value={this.state.salary} onChange={this.onChange}/>\r\n                </div>\r\n\r\n                <button className=\"btn btn-success\" onClick={this.saveUser}>Save</button>\r\n            </form>\r\n    </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddUserComponent;\r\n","import React, { Component } from 'react'\r\nimport ApiService from \"../../service/ApiService\";\r\n\r\nclass EditUserComponent extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            id: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            age: '',\r\n            salary: '',\r\n        }\r\n        this.saveUser = this.saveUser.bind(this);\r\n        this.loadUser = this.loadUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadUser();\r\n    }\r\n\r\n    loadUser() {\r\n        ApiService.fetchUserById(window.localStorage.getItem(\"userId\"))\r\n            .then((res) => {\r\n                let user = res.data.result;\r\n                this.setState({\r\n                id: user.id,\r\n                username: user.username,\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                age: user.age,\r\n                salary: user.salary,\r\n                })\r\n            });\r\n    }\r\n\r\n    onChange = (e) =>\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n    saveUser = (e) => {\r\n        e.preventDefault();\r\n        let user = {id: this.state.id, password: this.state.password, firstName: this.state.firstName, lastName: this.state.lastName, age: this.state.age, salary: this.state.salary};\r\n        ApiService.editUser(user)\r\n            .then(res => {\r\n                this.setState({message : 'User added successfully.'});\r\n                this.props.history.push('/users');\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\">Edit User</h2>\r\n                <form>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>User Name:</label>\r\n                        <input type=\"text\" placeholder=\"username\" name=\"username\" className=\"form-control\" readonly=\"true\" defaultValue={this.state.username}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>First Name:</label>\r\n                        <input placeholder=\"First Name\" name=\"firstName\" className=\"form-control\" value={this.state.firstName} onChange={this.onChange}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Last Name:</label>\r\n                        <input placeholder=\"Last name\" name=\"lastName\" className=\"form-control\" value={this.state.lastName} onChange={this.onChange}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Age:</label>\r\n                        <input type=\"number\" placeholder=\"age\" name=\"age\" className=\"form-control\" value={this.state.age} onChange={this.onChange}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Salary:</label>\r\n                        <input type=\"number\" placeholder=\"salary\" name=\"salary\" className=\"form-control\" value={this.state.salary} onChange={this.onChange}/>\r\n                    </div>\r\n\r\n                    <button className=\"btn btn-success\" onClick={this.saveUser}>Save</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditUserComponent;\r\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport ListUserComponent from \"./user/ListUserComponent\";\r\nimport AddUserComponent from \"./user/AddUserComponent\";\r\nimport EditUserComponent from \"./user/EditUserComponent\";\r\nimport React from \"react\";\r\n\r\nconst AppRouter = () => {\r\n    return(\r\n        <div>\r\n            <Router>\r\n                <div className=\"col-md-6\">\r\n                    <h1 className=\"text-center\" style={style}>React User Application</h1>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={ListUserComponent} />\r\n                        <Route path=\"/users\" component={ListUserComponent} />\r\n                        <Route path=\"/add-user\" component={AddUserComponent} />\r\n                        <Route path=\"/edit-user\" component={EditUserComponent} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    color: 'red',\r\n    margin: '10px'\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport './App.css';\nimport AppRouter from \"./component/RouterComponent\";\n\nfunction App() {\n  return (\n      <div className=\"container\">\n          <AppRouter/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}